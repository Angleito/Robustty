# Multi-stage build to reduce memory usage and final image size
FROM node:20-alpine as builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ opus-dev libsodium-dev

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build TypeScript with increased memory
RUN NODE_OPTIONS="--max-old-space-size=2048" npm run build

# Production stage - smaller final image
FROM node:20-alpine as production

# Install runtime dependencies only
RUN apk add --no-cache ffmpeg curl opus-dev libsodium-dev

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app

USER nodejs

# Start the bot
CMD ["node", "dist/index.js"]